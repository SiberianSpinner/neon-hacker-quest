// Define language types
export type Language = 'ru' | 'en';

// Get the user's system language from Telegram or browser
export const getSystemLanguage = (): Language => {
  console.log('‚ö†Ô∏è Language detection started');
  
  // IMPORTANT: For testing during development, force to English
  // Remove this in production
  if (process.env.NODE_ENV !== 'production') {
    console.log('üõ†Ô∏è DEV MODE: Forcing language to English for testing');
    return 'en';
  }
  
  // Check if we're in Telegram Web App
  if (window.Telegram?.WebApp) {
    console.log('üîç Telegram WebApp detected');
    
    // Get the language code from Telegram
    try {
      // Try to access language from WebApp directly
      const webApp = window.Telegram.WebApp;
      
      // Check initDataUnsafe first (the most direct path)
      if (webApp.initDataUnsafe?.user?.language_code) {
        const tgLang = webApp.initDataUnsafe.user.language_code.toLowerCase();
        console.log('üåê Using Telegram language from initDataUnsafe:', tgLang);
        
        // IMPORTANT: Force to English unless explicitly Russian ('ru' or 'ru-RU')
        const isRussian = tgLang === 'ru' || tgLang === 'ru-ru';
        console.log('Is Russian language?', isRussian);
        
        return isRussian ? 'ru' : 'en';
      } else {
        console.log('‚ùå No language_code in initDataUnsafe');
      }
      
      // Try to parse initData if available
      if (webApp.initData && webApp.initData.length > 0) {
        try {
          const parsedData = JSON.parse(webApp.initData);
          console.log('üìÑ Successfully parsed initData');
          
          if (parsedData?.user?.language_code) {
            const tgLang = parsedData.user.language_code.toLowerCase();
            console.log('üåê Using Telegram language from parsed initData:', tgLang);
            
            // IMPORTANT: Force to English unless explicitly Russian ('ru' or 'ru-RU')
            const isRussian = tgLang === 'ru' || tgLang === 'ru-ru';
            console.log('Is Russian language?', isRussian);
            
            return isRussian ? 'ru' : 'en';
          } else {
            console.log('‚ùå No language_code in parsed initData');
          }
        } catch (e) {
          console.error('‚ùå Error parsing Telegram initData:', e);
        }
      } else {
        console.log('‚ùå No initData available or empty string');
      }
      
      // Additional debug logging
      console.log('‚ö†Ô∏è Telegram WebApp is present but language detection failed');
      console.log('WebApp initDataUnsafe:', JSON.stringify(webApp.initDataUnsafe, null, 2));
      console.log('WebApp initData available:', !!webApp.initData);
      
      // IMPORTANT: Default to English if we can't determine the language from Telegram
      console.log('‚ö†Ô∏è EXPLICITLY DEFAULTING TO ENGLISH since Telegram language detection failed');
      return 'en';
    } catch (e) {
      console.error('‚ùå Error getting language from Telegram:', e);
      // IMPORTANT: Default to English on errors
      console.log('‚ö†Ô∏è EXPLICITLY DEFAULTING TO ENGLISH due to error');
      return 'en';
    }
  } else {
    console.log('‚ùå Telegram WebApp not detected');
  }
  
  // Fallback to browser language if Telegram language is not available
  try {
    const browserLang = (navigator.language || (navigator as any).userLanguage || '').toLowerCase();
    console.log('üåê Fallback to browser language:', browserLang);
    
    // Force to English unless explicitly Russian ('ru' or 'ru-RU')
    const isRussian = browserLang === 'ru' || 
                      browserLang === 'ru-ru' ||
                      browserLang.startsWith('ru-');
    
    console.log('Is Russian browser language?', isRussian);
    console.log('FINAL LANGUAGE CHOICE:', isRussian ? 'ru' : 'en');
    return isRussian ? 'ru' : 'en';
  } catch (e) {
    console.error('‚ùå Error detecting browser language:', e);
    // Default to English if all else fails
    console.log('‚ö†Ô∏è EXPLICITLY DEFAULTING TO ENGLISH as final fallback');
    return 'en';
  }
};

// Create translations object
type TranslationKey = 
  | 'hackProgress' 
  | 'invulnerability' 
  | 'swipeToMove' 
  | 'useArrowsToMove'
  | 'infoFoundCore'
  | 'gameOver'
  | 'gameOverScore'
  | 'hackComplete'
  | 'hackCompleteSuccess'
  // Start screen translations
  | 'lastHack'
  | 'vulnerabilitiesFound'
  | 'newVulnerabilitiesIn'
  | 'chips'
  | 'hack'
  | 'scripts'
  | 'searchVulnerabilities'
  | 'daemonProtocol'
  | 'daemonProtocolActive'
  | 'purchaseCompleted'
  | 'processingPayment'
  | 'leaderboard'
  | 'hackSecuritySystem'
  // Loading screen
  | 'initializingHack'
  // Button tooltips
  | 'daemonAlreadyActive'
  | 'alreadyPurchased'
  | 'paymentInProgress'
  // Ad related
  | 'adLoading'
  | 'adSimulation'
  | 'adCompleted'
  | 'adError'
  // Attempts related
  | 'noAttemptsLeft'
  | 'watchAdOrBuy'
  | 'dailyLimitReached'
  | 'newAttemptsAvailable'
  // Achievements (Chips) related
  | 'chipsTitle'
  | 'allChips'
  | 'unlockedChips'
  | 'lockedChips'
  | 'close'
  // Scripts related
  | 'scriptsTitle'
  | 'highestScore'
  | 'scriptActivated'
  | 'newScriptApplied'
  // Leaderboard related
  | 'leaderboardTitle'
  | 'leaderboardRunner'
  | 'leaderboardHackResult'
  | 'leaderboardNoScores'
  // Payment related
  | 'paymentSuccess'
  | 'paymentActivated'
  | 'paymentCancelled'
  | 'paymentErrorMessage'
  | 'paymentFailed'
  | 'paymentWaiting'
  | 'paymentUnknownStatus'
  | 'paymentUnknownMessage'
  | 'adAttemptReceived'
  | 'paymentInProgressMessage'
  | 'alreadyActiveMessage'
  | 'paymentCreating'
  | 'additionalAttemptsReceived'
  | 'unlimitedModeActivated'
  | 'unlimitedModeMessage'
  | 'version'
  // Achievement names and descriptions
  | 'firstRunName'
  | 'firstRunDescription'
  | 'tenPercentName'
  | 'tenPercentDescription'
  | 'twentyFivePercentName'
  | 'twentyFivePercentDescription'
  | 'fiftyPercentName'
  | 'fiftyPercentDescription'
  | 'seventyFivePercentName'
  | 'seventyFivePercentDescription'
  | 'hundredPercentName'
  | 'hundredPercentDescription'
  // New achievement keys
  | 'collect10KeysName'
  | 'collect10KeysDescription'
  | 'collect25KeysName'
  | 'collect25KeysDescription'
  | 'collect50KeysName'
  | 'collect50KeysDescription'
  | 'collect10BackdoorsName'
  | 'collect10BackdoorsDescription'
  | 'collect25BackdoorsName'
  | 'collect25BackdoorsDescription'
  | 'collect50BackdoorsName'
  | 'collect50BackdoorsDescription'
  | 'play10GamesName'
  | 'play10GamesDescription'
  | 'play25GamesName'
  | 'play25GamesDescription'
  | 'play50GamesName'
  | 'play50GamesDescription'
  | 'defeat1BossName'
  | 'defeat1BossDescription'
  | 'defeat3BossesName'
  | 'defeat3BossesDescription'
  | 'defeat5BossesName'
  | 'defeat5BossesDescription'
  | 'defeatAllBossLevelsName'
  | 'defeatAllBossLevelsDescription'
  // Skin related translations
  | 'defaultSkinName'
  | 'defaultSkinDescription'
  | 'purpleSkinName'
  | 'purpleSkinDescription'
  | 'redSkinName'
  | 'redSkinDescription'
  | 'rainbowSkinName'
  | 'rainbowSkinDescription';

export const translations: Record<Language, Record<TranslationKey, string>> = {
  ru: {
    // Existing translations
    hackProgress: '–í–ó–õ–û–ú:',
    invulnerability: '–ù–ï–£–Ø–ó–í–ò–ú–û–°–¢–¨:',
    swipeToMove: '–ü—Ä–æ–≤–µ–¥–∏—Ç–µ –ø–∞–ª—å—Ü–µ–º –ø–æ —ç–∫—Ä–∞–Ω—É, —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è',
    useArrowsToMove: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–µ–ª–∫–∏ –∏–ª–∏ WASD –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
    infoFoundCore: '–û–ë–ù–ê–†–£–ñ–ï–ù–û –ò–ù–§–û–†–ú–ê–¶–ò–û–ù–ù–û–ï –Ø–î–†–û!',
    gameOver: '–í–∑–ª–æ–º –ø—Ä–µ—Ä–≤–∞–Ω',
    gameOverScore: '–í–∞—à —Å—á—ë—Ç:',
    hackComplete: '–í–∑–ª–æ–º —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!',
    hackCompleteSuccess: '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ 100% –≤–∑–ª–æ–º–∞!',
    
    // Start screen translations
    lastHack: '–ü–û–°–õ–ï–î–ù–ò–ô –í–ó–õ–û–ú:',
    vulnerabilitiesFound: '–ù–ê–ô–î–ï–ù–û –£–Ø–ó–í–ò–ú–û–°–¢–ï–ô:',
    newVulnerabilitiesIn: '–ù–û–í–´–ï –£–Ø–ó–í–ò–ú–û–°–¢–ò –ß–ï–†–ï–ó:',
    chips: '–ß–ò–ü–´',
    hack: '–í–ó–õ–û–ú',
    scripts: '–°–ö–†–ò–ü–¢–´',
    searchVulnerabilities: '–ü–û–ò–°–ö –£–Ø–ó–í–ò–ú–û–°–¢–ï–ô',
    daemonProtocol: '–ü–†–û–¢–û–ö–û–õ "–î–ï–ú–û–ù"',
    daemonProtocolActive: '–ü–†–û–¢–û–ö–û–õ "–î–ï–ú–û–ù" –ê–ö–¢–ò–í–ï–ù',
    purchaseCompleted: '–ü–û–ö–£–ü–ö–ê –í–´–ü–û–õ–ù–ï–ù–ê',
    processingPayment: '–û–ë–†–ê–ë–û–¢–ö–ê –ü–õ–ê–¢–ï–ñ–ê...',
    leaderboard: '–õ–ò–î–ï–†–ë–û–†–î',
    hackSecuritySystem: '–í–ó–õ–û–ú–ê–ô –°–ò–°–¢–ï–ú–£ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –û–î–ù–û–ô –ò–ó –ö–û–†–ü–û–†–ê–¶–ò–ô',
    
    // Loading screen
    initializingHack: '–ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –í–ó–õ–û–ú–ê...',
    
    // Button tooltips
    daemonAlreadyActive: '–ü—Ä–æ—Ç–æ–∫–æ–ª "–î–µ–º–æ–Ω" —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω',
    alreadyPurchased: '–í—ã —É–∂–µ —Å–æ–≤–µ—Ä—à–∏–ª–∏ –ø–æ–∫—É–ø–∫—É',
    paymentInProgress: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞',
    
    // Ad related
    adLoading: '–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∫–ª–∞–º—ã...',
    adSimulation: '–°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∫–ª–∞–º—ã.',
    adCompleted: '–†–µ–∫–ª–∞–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
    adError: '–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ä–µ–∫–ª–∞–º—ã',
    
    // Attempts related
    noAttemptsLeft: '–ù–µ—Ç –ø–æ–ø—ã—Ç–æ–∫!',
    watchAdOrBuy: '–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–µ–∫–ª–∞–º—É –∏–ª–∏ –∫—É–ø–∏—Ç–µ –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏.',
    dailyLimitReached: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω!',
    newAttemptsAvailable: '–ù–æ–≤—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤ 00:01.',
    
    // Achievements (Chips) related
    chipsTitle: '–ß–ò–ü–´',
    allChips: '–í–°–ï',
    unlockedChips: '–û–¢–ö–†–´–¢–´',
    lockedChips: '–ó–ê–ö–†–´–¢–´',
    close: '–ó–ê–ö–†–´–¢–¨',
    
    // Scripts related
    scriptsTitle: '–°–ö–†–ò–ü–¢–´',
    highestScore: '–í–∞—à —Ä–µ–∫–æ—Ä–¥: {score} ({percent}%)',
    scriptActivated: '–°–∫—Ä–∏–ø—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω',
    newScriptApplied: '–ù–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω',
    
    // Add missing translations for Leaderboard
    leaderboardTitle: '–¢–ê–ë–õ–ò–¶–ê –õ–ò–î–ï–†–û–í',
    leaderboardRunner: '–•–ê–ö–ï–†',
    leaderboardHackResult: '–†–ï–ó–£–õ–¨–¢–ê–¢',
    leaderboardNoScores: '–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤',
    
    // Payment related
    paymentSuccess: '–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞',
    paymentActivated: '–ü—Ä–æ—Ç–æ–∫–æ–ª "–î–µ–º–æ–Ω" –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –£ –≤–∞—Å –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏!',
    paymentCancelled: '–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω',
    paymentErrorMessage: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑',
    paymentFailed: '–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞',
    paymentWaiting: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...',
    paymentUnknownStatus: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞',
    paymentUnknownMessage: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ',
    adAttemptReceived: '–í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø–æ–ø—ã—Ç–∫—É!',
    paymentInProgressMessage: '–î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞',
    alreadyActiveMessage: '–£ –≤–∞—Å —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø—Ä–æ—Ç–æ–∫–æ–ª "–î–µ–º–æ–Ω"',
    paymentCreating: '–°–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–∞',
    additionalAttemptsReceived: '–í—ã –ø–æ–ª—É—á–∏–ª–∏ {count} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫!',
    unlimitedModeActivated: '–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω',
    unlimitedModeMessage: '–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫!',
    version: '–í–µ—Ä—Å–∏—è',
    
    // Achievement names and descriptions
    firstRunName: '–ü–µ—Ä–≤–∞—è –ó–∞–≥—Ä—É–∑–∫–∞',
    firstRunDescription: '–ù–∞—á–Ω–∏—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –ø–æ–ø—ã—Ç–∫—É –≤–∑–ª–æ–º–∞',
    tenPercentName: '10% –î–æ—Å—Ç—É–ø–∞',
    tenPercentDescription: '–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 10% –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–∑–ª–æ–º–∞',
    twentyFivePercentName: '25% –î–æ—Å—Ç—É–ø–∞',
    twentyFivePercentDescription: '–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 25% –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–∑–ª–æ–º–∞',
    fiftyPercentName: '50% –î–æ—Å—Ç—É–ø–∞',
    fiftyPercentDescription: '–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 50% –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–∑–ª–æ–º–∞',
    seventyFivePercentName: '75% –î–æ—Å—Ç—É–ø–∞',
    seventyFivePercentDescription: '–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 75% –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–∑–ª–æ–º–∞',
    hundredPercentName: '100% –î–æ—Å—Ç—É–ø–∞',
    hundredPercentDescription: '–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 100% –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–∑–ª–æ–º–∞',
    
    // New achievement translations
    collect10KeysName: '10 –ö–ª—é—á–µ–π –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
    collect10KeysDescription: '–°–æ–±–µ—Ä–∏—Ç–µ 10 –∫–ª—é—á–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
    collect25KeysName: '25 –ö–ª—é—á–µ–π –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
    collect25KeysDescription: '–°–æ–±–µ—Ä–∏—Ç–µ 25 –∫–ª—é—á–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
    collect50KeysName: '50 –ö–ª—é—á–µ–π –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
    collect50KeysDescription: '–°–æ–±–µ—Ä–∏—Ç–µ 50 –∫–ª—é—á–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
    collect10BackdoorsName: '10 –ë—ç–∫–¥–æ—Ä–æ–≤',
    collect10BackdoorsDescription: '–°–æ–±–µ—Ä–∏—Ç–µ 10 –±—ç–∫–¥–æ—Ä–æ–≤',
    collect25BackdoorsName: '25 –ë—ç–∫–¥–æ—Ä–æ–≤',
    collect25BackdoorsDescription: '–°–æ–±–µ—Ä–∏—Ç–µ 25 –±—ç–∫–¥–æ—Ä–æ–≤',
    collect50BackdoorsName: '50 –ë—ç–∫–¥–æ—Ä–æ–≤',
    collect50BackdoorsDescription: '–°–æ–±–µ—Ä–∏—Ç–µ 50 –±—ç–∫–¥–æ—Ä–æ–≤',
    play10GamesName: '10 –ó–∞–ø—É—Å–∫–æ–≤',
    play10GamesDescription: '–ó–∞–ø—É—Å—Ç–∏—Ç–µ –∏–≥—Ä—É 10 —Ä–∞–∑',
    play25GamesName: '25 –ó–∞–ø—É—Å–∫–æ–≤',
    play25GamesDescription: '–ó–∞–ø—É—Å—Ç–∏—Ç–µ –∏–≥—Ä—É 25 —Ä–∞–∑',
    play50GamesName: '50 –ó–∞–ø—É—Å–∫–æ–≤',
    play50GamesDescription: '–ó–∞–ø—É—Å—Ç–∏—Ç–µ –∏–≥—Ä—É 50 —Ä–∞–∑',
    defeat1BossName: '–ü–µ—Ä–≤–∞—è –ø–æ–±–µ–¥–∞ –Ω–∞–¥ –±–æ—Å—Å–æ–º',
    defeat1BossDescription: '–ü–æ–±–µ–¥–∏—Ç–µ –±–æ—Å—Å–∞ 1 —Ä–∞–∑',
    defeat3BossesName: '3 –ü–æ–±–µ–¥—ã –Ω–∞–¥ –±–æ—Å—Å–∞–º–∏',
    defeat3BossesDescription: '–ü–æ–±–µ–¥–∏—Ç–µ –±–æ—Å—Å–æ–≤ 3 —Ä–∞–∑–∞',
    defeat5BossesName: '5 –ü–æ–±–µ–¥ –Ω–∞–¥ –±–æ—Å—Å–∞–º–∏',
    defeat5BossesDescription: '–ü–æ–±–µ–¥–∏—Ç–µ –±–æ—Å—Å–æ–≤ 5 —Ä–∞–∑',
    defeatAllBossLevelsName: '–ü–æ–±–µ–¥–∞ –Ω–∞–¥ –≤—Å–µ–º–∏ —É—Ä–æ–≤–Ω—è–º–∏ –±–æ—Å—Å–æ–≤',
    defeatAllBossLevelsDescription: '–ü–æ–±–µ–¥–∏—Ç–µ –±–æ—Å—Å–æ–≤ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π (33k, 66k, 99k)',
    
    // Skin related translations
    defaultSkinName: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π',
    defaultSkinDescription: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ—Ç—Ä–∞–Ω–Ω–µ—Ä–∞',
    purpleSkinName: '–§–∏–æ–ª–µ—Ç–æ–≤—ã–π',
    purpleSkinDescription: '–î–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–∏ –≤–∑–ª–æ–º–µ 25%',
    redSkinName: '–ö—Ä–∞—Å–Ω—ã–π',
    redSkinDescription: '–î–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–∏ –≤–∑–ª–æ–º–µ 50%',
    rainbowSkinName: '–ü–µ—Ä–µ–ª–∏–≤',
    rainbowSkinDescription: '–î–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–∏ –≤–∑–ª–æ–º–µ 75%'
  },
  en: {
    // Existing translations
    hackProgress: 'HACK:',
    invulnerability: 'INVULNERABILITY:',
    swipeToMove: 'Swipe on screen to set movement direction',
    useArrowsToMove: 'Use arrows or WASD to control',
    infoFoundCore: 'INFORMATION CORE DETECTED!',
    gameOver: 'Hack interrupted',
    gameOverScore: 'Your score:',
    hackComplete: 'Hack completed successfully!',
    hackCompleteSuccess: 'Congratulations! You reached 100% hack!',
    
    // Start screen translations
    lastHack: 'LAST HACK:',
    vulnerabilitiesFound: 'VULNERABILITIES FOUND:',
    newVulnerabilitiesIn: 'NEW VULNERABILITIES IN:',
    chips: 'CHIPS',
    hack: 'HACK',
    scripts: 'SCRIPTS',
    searchVulnerabilities: 'SEARCH VULNERABILITIES',
    daemonProtocol: 'DAEMON PROTOCOL',
    daemonProtocolActive: 'DAEMON PROTOCOL ACTIVE',
    purchaseCompleted: 'PURCHASE COMPLETED',
    processingPayment: 'PROCESSING PAYMENT...',
    leaderboard: 'LEADERBOARD',
    hackSecuritySystem: 'HACK THE SECURITY SYSTEM OF ONE OF THE CORPORATIONS',
    
    // Loading screen
    initializingHack: 'INITIALIZING HACK...',
    
    // Button tooltips
    daemonAlreadyActive: 'Daemon Protocol already active',
    alreadyPurchased: 'You have already purchased this',
    paymentInProgress: 'Processing payment',
    
    // Ad related
    adLoading: 'Loading advertisement...',
    adSimulation: 'Simulating ad view.',
    adCompleted: 'Advertisement completed',
    adError: 'Error displaying advertisement',
    
    // Attempts related
    noAttemptsLeft: 'No attempts left!',
    watchAdOrBuy: 'Watch an ad or buy unlimited attempts.',
    dailyLimitReached: 'Daily limit reached!',
    newAttemptsAvailable: 'New attempts will be available at 00:01.',
    
    // Achievements (Chips) related
    chipsTitle: 'CHIPS',
    allChips: 'ALL',
    unlockedChips: 'UNLOCKED',
    lockedChips: 'LOCKED',
    close: 'CLOSE',
    
    // Scripts related
    scriptsTitle: 'SCRIPTS',
    highestScore: 'Highest score: {score} ({percent}%)',
    scriptActivated: 'Script activated',
    newScriptApplied: 'New script successfully applied',
    
    // Add missing translations for Leaderboard
    leaderboardTitle: 'LEADERBOARD',
    leaderboardRunner: 'RUNNER',
    leaderboardHackResult: 'HACK RESULT',
    leaderboardNoScores: 'No scores yet',
    
    // Payment related
    paymentSuccess: 'Payment successful',
    paymentActivated: 'Daemon Protocol activated! You have unlimited attempts!',
    paymentCancelled: 'Payment cancelled',
    paymentErrorMessage: 'Check your payment details and try again',
    paymentFailed: 'Payment failed',
    paymentWaiting: 'Please wait...',
    paymentUnknownStatus: 'Unknown payment status',
    paymentUnknownMessage: 'Check your payment status and try again later',
    adAttemptReceived: 'You received an additional attempt!',
    paymentInProgressMessage: 'Wait for the current payment to complete',
    alreadyActiveMessage: 'You already have the Daemon Protocol active',
    paymentCreating: 'Creating invoice',
    additionalAttemptsReceived: 'You received {count} additional attempts!',
    unlimitedModeActivated: 'Unlimited mode activated',
    unlimitedModeMessage: 'You now have unlimited attempts!',
    version: 'Version',
    
    // Achievement names and descriptions
    firstRunName: 'First Boot',
    firstRunDescription: 'Start your first hack attempt',
    tenPercentName: '10% Access',
    tenPercentDescription: 'Reach 10% hack completion',
    twentyFivePercentName: '25% Access',
    twentyFivePercentDescription: 'Reach 25% hack completion',
    fiftyPercentName: '50% Access',
    fiftyPercentDescription: 'Reach 50% hack completion',
    seventyFivePercentName: '75% Access',
    seventyFivePercentDescription: 'Reach 75% hack completion',
    hundredPercentName: '100% Access',
    hundredPercentDescription: 'Reach 100% hack completion',
    
    // New achievement translations
    collect10KeysName: '10 Security Keys',
    collect10KeysDescription: 'Collect 10 security keys',
    collect25KeysName: '25 Security Keys',
    collect25KeysDescription: 'Collect 25 security keys',
    collect50KeysName: '50 Security Keys',
    collect50KeysDescription: 'Collect 50 security keys',
    collect10BackdoorsName: '10 Backdoors',
    collect10BackdoorsDescription: 'Collect 10 backdoors',
    collect25BackdoorsName: '25 Backdoors',
    collect25BackdoorsDescription: 'Collect 25 backdoors',
    collect50BackdoorsName: '50 Backdoors',
    collect50BackdoorsDescription: 'Collect 50 backdoors',
    play10GamesName: '10 Runs',
    play10GamesDescription: 'Launch the game 10 times',
    play25GamesName: '25 Runs',
    play25GamesDescription: 'Launch the game 25 times',
    play50GamesName: '50 Runs',
    play50GamesDescription: 'Launch the game 50 times',
    defeat1BossName: 'First Boss Victory',
    defeat1BossDescription: 'Defeat a boss 1 time',
    defeat3BossesName: '3 Boss Victories',
    defeat3BossesDescription: 'Defeat bosses 3 times',
    defeat5BossesName: '5 Boss Victories',
    defeat5BossesDescription: 'Defeat bosses 5 times',
    defeatAllBossLevelsName: 'All Boss Levels Defeated',
    defeatAllBossLevelsDescription: 'Defeat bosses of all levels (33k, 66k, 99k)',
    
    // Skin related translations
    defaultSkinName: 'Default',
    defaultSkinDescription: 'Standard netrunner connection',
    purpleSkinName: 'Purple',
    purpleSkinDescription: 'Available at 25% hack completion',
    redSkinName: 'Red',
    redSkinDescription: 'Available at 50% hack completion',
    rainbowSkinName: 'Rainbow',
    rainbowSkinDescription: 'Available at 75% hack completion'
  }
};

// Translation function
export const t = (key: TranslationKey, params?: Record<string, string | number>): string => {
  const lang = getSystemLanguage();
  let translatedText = translations[lang][key];
  
  // Replace any parameters in the translation
  if (params) {
    Object.entries(params).forEach(([paramKey, paramValue]) => {
      translatedText = translatedText.replace(`{${paramKey}}`, String(paramValue));
    });
  }
  
  return translatedText;
};
